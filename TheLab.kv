#:set s dp(150)

CanvasExample7:    #the name of the main interface decides what is going to be used
                      #replace the name of the main interface to see each example.


<CanvasExample>:
    canvas:
        Rectangle:
            pos: self.center_x-s/2, self.center_y-s/2  #dp(100), dp(200)
            size: s, s   #dp(150), dp(150)
        Ellipse:
            pos: 200, 500
            size: s, s/2      #(width, height)
        Line:
            points: (0, 0, self.width/4,100, self.width/2, 0, self.width*3/4, 100, self.width, 0)
            width: 2

<CanvasExample2>:
    canvas:
        Line:
            points: (0, self.height/2, self.width, self.height/2)
            width: 2
        Line:
            points: (self.width/2, 0, self.width/2, self.height)
            width: 2

<CanvasExample3>:
    canvas:
        Color:
            rgba: 1, 0, 0, .3
        Line:
            circle: (200, 200, 100) # center_x, center_y, radius
            width: 2
        Line:
            ellipse: (500, 300, 100, 200) # center_x, center_y, radius_x, radius_y
            width: 4
        Color:
            rgba: 0, 0, 1, 1
        Line:
            rectangle: (800, 100, 300, 200)  #x, y, w, h
<CanvasExample4>:
    Button:
        pos: 100, 400
        text: "A"
        on_press: root.on_button_a_click()

<CanvasExample6>:
    BoxLayout
        size: root.size
        Widget:
            canvas:
                Color:
                    rgb: 0, 1, 0
                Rectangle:
                    size: self.size
        Widget:     #RelativeLayout will change position 0, 0.
            canvas:
                Color:
                    rgb: 0, 0, 1
                Rectangle:
                    size: self.size
                    pos: self.pos   #No need with RelativeLayout

<CanvasExample7>:
    RelativeLayout:
        canvas:
            Color:
                rgb: 0, 0, 1
            Rectangle:
                size: self.size
    RelativeLayout:
        canvas:
            Color:
                rgb: 1, 1, 1
            Rectangle:
                size: self.size
    RelativeLayout:
        canvas:
            Color:
                rgb: 1, 0, 0
            Rectangle:
                size: self.size



<ImageExample@GridLayout>:
    cols: 3
    Image:
        source: "images/cake.jpg"
    Image:
        source: "images/cake.jpg"
        allow_stretch: True
    Image:
        source: "images/cake.jpg"
        allow_stretch: True
        keep_ratio: False

<WidgetsExample>:
    cols: 3
    ToggleButton:
        text: "OFF"
        on_state: root.on_toggle_button_state(self)
        size_hint: None, 1
        width: "100dp"

    Button:
        #text: "Click here"
        text: "Count"
        on_press: root.on_button_click() #self concerns the button, root concerns the widget
        disabled: not root.count_enabled  #if True the button is disabled
    Label:
        text: root.my_text  #the text of the  label will always be the content of the text property
        font_name: "fonts/Lcd.ttf"
        font_size: "80dp"
        color:1, .5, 1, 1
    Switch:
        id: my_switch
        on_active: root.on_switch_active(self)
        size_hint: None, 1
        width: "100dp"
        active: True
    Slider:
        id: my_slider
        min: 0
        max: 100
        value: 50
        #on_value: root.on_slider_value(self)
        orientation: "vertical"
        disabled: not my_switch.active
    BoxLayout:
        orientation: "vertical"
        Label:
            #text: root.slider_value_txt
            text: str(int(my_slider.value))
        ProgressBar:
            max: 100
            value: my_slider.value

    TextInput:
        id: my_text_input
        size_hint: None, 1
        width: "100dp"
        text: "Foo"
        multiline: False
        on_text_validate: root.on_text_validate(self)
    Label:
        #text: my_text_input.text #this is a binding
        text: "Your name is: " + root.text_input_str


<PageLayoutExample@PageLayout>:
    MainWidget:
    BoxLayoutExample:
    AnchorLayoutExample:
    GridLayoutExample:


<ScrollViewExample@ScrollView>: #ScrollView can only take 1 child
    StackLayoutExample
        size_hint: 1, None  # vertical or horizontal
        height: self.minimum_height #this is calculated in the StackLayout and corresponds to the actual content.


<StackLayoutExample>:   #define the example. StackLayout will stack the items on multiple lines. Need to give the size of each item.
    #right-left top-bottom
    #orientation: "rl-tb"
    #padding: ("20dp", "20dp", "20dp", "20dp") #padding is an internal margin. left, top, right, bottom.
    #spacing: "20dp", "20dp" # horizontal and vertical spacing

   #Button:
   #     text: "A"
   #     size_hint: .2, .2
   #Button:
   #     text: "B"
   #     size_hint: .2, .2
   #Button:
   #    text: "C"
   #    size_hint: .2, .2
    #Button:
    #    text: "D"
    #    size_hint: .2, .2
    #Button:
    #    text: "E"
    #    size_hint: .2, .2
    #Button:
    #    text: "F"
    #    size_hint: .2, .2"""


<GridLayoutExample@GridLayout>:#You can write it this way and not make the class in the Python file.
#rows #must be specified
#cols #must be specified
    #cols:3
    rows: 2
    #size_hint: .5, 1
    Button:
        text: "A"
        size_hint: .5, 1
    BoxLayoutExample:   #You can embed outer layouts inside layouts.
    Button:
        text: "C"
    Button:
        text: "D"
        size_hint: .5, 1
    Button:
        text: "E"
    Button:
        text: "F"


<AnchorLayoutExample>:  #AnchorLayot takes all of the space
    # right, left, center
    anchor_x: "center"
    # bottom, top, center
    anchor_y: "top"
    BoxLayout:
        size_hint: .2, .2
        Button:
            text: "A"
            #size_hint: .1, .1
        Button:
            text: "B"
            #size_hint: .1, .1

<BoxLayoutExample>:
    orientation: "horizontal"
    Button:
        text: "A"
        #size: "100dp", "60dp"   #you can only use size if size hint value is None.
        size_hint: .5, None
        #width: "100dp"   #you can add width and height seperately
        #height: "60dp"
        # x, center_x, right   #only use 1(x or right). x is the left part of the button, center_x is the center of the button and right is the right side.
        # y, center_y, top   #only use 1(y or top)
        pos_hint: {"x": .5}   # its a percentage and refers to the left side of the button.

    BoxLayout:
        orientation: "vertical"
        spacing: "10dp"
        Button:
            text: "B1"
        Button:
            text: "B2"
        Button:
            text: "B3"
        Button:
            text: "B4"
    Label:
        text: "C"

<MainWidget>:
    Button:
        text: "Hello"
        size: "100dp", "80dp"
        pos: "100dp", "200dp"

    Button:
        text: "Hello2"
        size: "100dp", "80dp"
        pos: "100dp", "300dp"
        color: 1,0,0,1